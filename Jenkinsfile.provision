pipeline {
    agent any

    environment {
        AWS_REGION = "us-east-1"
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Terraform Init & Apply') {
            steps {
                withCredentials([aws(
                    credentialsId: 'aws-creds', 
                    accessKeyVariable: 'AWS_ACCESS_KEY_ID', 
                    secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                )]) {
                    sh '''
                      cd terraform
                      terraform init
                      terraform apply -auto-approve
                    '''
                }
            }
        }

        stage('Wait for EC2 to be ready') {
            steps {
                withCredentials([aws(
                    credentialsId: 'aws-creds', 
                    accessKeyVariable: 'AWS_ACCESS_KEY_ID', 
                    secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                )]) {
                    script {
                        def ec2_ip = sh(script: """
                            aws ssm get-parameter \
                              --name "/jenkins/ci_ephemeral_ip" \
                              --region ${AWS_REGION} \
                              --query "Parameter.Value" \
                              --output text
                        """, returnStdout: true).trim()

                        env.EC2_IP = ec2_ip
                        echo "EC2 IP: ${env.EC2_IP}"

                        sh """
                          echo "Waiting for SSH on ${env.EC2_IP}..."
                          timeout=60
                          while ! timeout 5 bash -c "</dev/tcp/${env.EC2_IP}/22"; do
                              echo "Waiting for SSH..."
                              sleep 5
                              timeout=\$((timeout-5))
                              if [ \$timeout -le 0 ]; then
                                  echo "Timeout waiting for EC2 SSH"
                                  exit 1
                              fi
                          done
                          echo "EC2 is ready for Ansible"
                        """
                    }
                }
            }
        }

        stage('Configure with Ansible') {
            steps {
                withCredentials([file(credentialsId: 'JENKINS_PEM', variable: 'JENKINS_PEM')]) {
                    sh """
                      chmod 400 \$JENKINS_PEM
                      echo "Connecting to EC2 at ${env.EC2_IP}"

                      ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook \
                        -i "${env.EC2_IP}," \
                        -u ec2-user \
                        --private-key \$JENKINS_PEM \
                        ansible/install_docker.yml
                    """
                }
            }
        }
    }
}
